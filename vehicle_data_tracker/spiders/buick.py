"""
Handles the scraping and processing of data from the Buick website. Currently, there are enough differences in GM
websites to warrant multiple spiders, but that may change in the future.

Author: Tyler Jaafari

Version: 1.2
    1.1 - added a perhaps overly complex system of determining when to include the engine or transmission in a trim name
    1.2 - created a much simpler system of determining when to include the engine or transmission in a trim name
"""

import scrapy
import json
from vehicle_data_tracker.utilities import *
from vehicle_data_tracker.items import Vehicle
import re


class BuickSpider(scrapy.Spider):
    name = 'buick'
    allowed_domains = ['www.buick.com']
    start_urls = ['https://www.buick.com/']

    output_format = 'csv'
    output_file = 'individual_outputs/' + name + '_output.' + output_format

    custom_settings = {
        # 'FEEDS': {
        #     output_file: {
        #         'format': output_format,
        #         'overwrite': True,
        #         'fields': STANDARD_FIELDS,
        #     }
        # },
        'ITEM_PIPELINES': {
            'vehicle_data_tracker.pipelines.FormatPipeline': 300,
            'vehicle_data_tracker.pipelines.DuplicatePipeline': 400,
        }
    }

    def gen_api_link(self, model_name: str, model_year: str):
        modelID = model_name.replace(' ', '-')
        api_link = f'https://{self.allowed_domains[0]}/byo-vc/api/v2/trim-matrix/en/US/{self.name}/{modelID}/{model_year}/{modelID}'
        return api_link

    # NOTES
    # on buick homepage there is an <a> link to an all vehicles page with title="All Vehicles"
    # the data on models and trims is loaded dynamically onto the page, making it inaccessible from scraping
    # the html alone. We need to send requests directly to Buick's API.

    # for 2021 encore: https://www.buick.com/byo-vc/api/v2/trim-matrix/en/US/buick/encore/2021/encore

    def parse(self, response, **kwargs):
        allVehiclesLink = response.xpath('//a[@title="All Vehicles"]/@href').get()
        yield response.follow(url=allVehiclesLink, callback=self.parse_models, cb_kwargs=kwargs)

    def parse_models(self, response, **kwargs):
        """
        Gets the year and name of each model, then follows a link generated by gen_api_link.

        :return: an iterable of Requests
        """
        vehicleTiles = response.xpath('//div[contains(@class, "vehicle-tile")]')
        for tile in vehicleTiles:
            modelData = str(tile.xpath('a/@data-dtm').get()).split(' ', 1)  # split at first space to get year & name
            modelYear = modelData[0]
            modelName = modelData[1]
            modelID = modelData[1].replace(' ', '-')
            args = {'model': modelName, 'year': modelYear, 'id': modelID}
            api_link = self.gen_api_link(modelName, modelYear)
            yield response.follow(url=api_link, callback=self.parse_trims, cb_kwargs=args)

    def parse_trims(self, response, **kwargs):
        """
        Parses the JSON response from the Buick API.

        :param response: a JSON document
        :param kwargs: should contain model and year
        :return: a list of vehicles
        """
        vehicles = []

        vehicleData = response.json()
        engines = {}
        transmissions = {}
        appendEngine = len(vehicleData['engines']) > 1
        appendTransmission = len(vehicleData['transmissions']) > 1
        if appendEngine and appendTransmission:
            for engine in vehicleData['engines']:
                description = str(engine['description'])
                literSizeMatch = re.search('\d[.]\d[L]', description)
                descriptionShort = literSizeMatch[0]
                descriptionShort += description[literSizeMatch.end():description.find(' ', literSizeMatch.end()+1)]
                engines[engine['id']] = descriptionShort
            for transmission in vehicleData['transmissions']:
                description = transmission['description']
                if '(' in description:
                    description = description[description.find('(')+1:description.find(')')]
                elif 'automatic' in description:
                    description = 'automatic'
                elif 'manual' in description:
                    description = 'manual'
                transmissions[transmission['id']] = description
        for trimData in vehicleData['options']:
            trim = Vehicle()
            trim['make'] = self.name.upper()
            trim['model'] = kwargs['model']
            trim['year'] = kwargs['year']
            # much simpler method of appending engine/transmission than what I wrote previously
            trimName = f"{trimData['trimName']} {trimData['driveType']}"
            if appendEngine:
                trimName += ' ' + engines[trimData['engine']]
            if appendTransmission:
                trimName += ' ' + transmissions[trimData['transmission']]
            trim['trim'] = trimName
            trim['msrp'] = trimData['msrp']['amount']['text']
            vehicles.append(trim)

        return vehicles
